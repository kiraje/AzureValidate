# Docker Compose with integrated Nginx reverse proxy
# Use this if you want to run nginx inside Docker alongside your app

version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: azure-validator-nginx
    ports:
      - "80:80"
      - "443:443"  # For HTTPS (optional)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/azure-validator.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      # Uncomment for SSL certificates
      # - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - validator-api
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # Main application (no external ports - accessed via nginx)
  validator-api:
    build: .
    container_name: azure-validator-api
    expose:
      - "3000"  # Internal port only
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/validator
      - REDIS_URL=redis://redis:6379
      - API_KEY=your-secure-api-key
      - PORT=3000
      - WEBHOOK_RETRY_COUNT=3
      - VALIDATION_TIMEOUT=300000
      - CLEANUP_ENABLED=true
    depends_on:
      - db
      - redis
    volumes:
      - app_logs:/app/logs
      - ./test-files:/app/test-files:ro
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (internal only)
  db:
    image: postgres:15-alpine
    container_name: azure-validator-db
    environment:
      - POSTGRES_DB=validator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache (internal only)
  redis:
    image: redis:7-alpine
    container_name: azure-validator-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  nginx_logs:
  app_logs: